const fs = require('fs/promises');

class Product {
    constructor(title, description, price, thumbnail, code, stock) {
        this.id = Product.incrementId();
        this.title = title;
        this.description = description;
        this.price = price;
        this.thumbnail = thumbnail;
        this.code = code;
        this.stock = stock;
    }

    static incrementId() {
        if (!this.latestId) this.latestId = 1;
        else this.latestId++;
        return this.latestId;
    }
}

class ProductManager {
    constructor(filePath) {
        // Inicializamos el arreglo de productos como vacío
        this.products = [];
        // Establecemos la ruta del archivo
        this.path = filePath;
        // Inicializamos la instancia con los productos existentes en el archivo
        this.loadProductsFromFile();
    }

    async loadProductsFromFile() {
        try {
            const data = await fs.readFile(this.path, 'utf-8');
            this.products = JSON.parse(data);
        } catch (error) {
            // Si hay un error (por ejemplo, el archivo no existe), simplemente dejamos el arreglo vacío
            this.products = [];
        }
    }

    async saveProductsToFile() {
        try {
            const data = JSON.stringify(this.products, null, 2);
            await fs.writeFile(this.path, data, 'utf-8');
        } catch (error) {
            console.error("Error al guardar productos en el archivo:", error.message);
            throw error; // Propagar el error para que sea manejado fuera de la función
        }
    }

    async addProduct(title, description, price, thumbnail, code, stock) {
        return new Promise(async (resolve, reject) => {
            // Validamos que todos los campos sean obligatorios
            if (!title || !description || !price || !thumbnail || !code || !stock) {
                reject("Todos los campos son obligatorios.");
                return;
            }

            // Validamos que el campo "code" no se repita
            if (this.products.some(product => product.code === code)) {
                reject("El código ya existe. Debe ser único.");
                return;
            }

            // Creamos un nuevo producto y lo agregamos al arreglo
            const newProduct = new Product(title, description, price, thumbnail, code, stock);
            this.products.push(newProduct);
            await fs.writeFile(this.path, JSON.stringify(this.products, null, 2), 'utf-8')

            resolve(`Producto '${title}' agregado con éxito. ID: ${newProduct.id}`);
        });
    }

    async getProducts() {
        return new Promise(async (resolve) => {
            resolve(this.products);
        });
    }

    async getProductById(id) {
        return new Promise(async (resolve, reject) => {
            const product = this.products.find(product => product.id === id);
            if (product) {
                resolve(product);
            } else {
                reject("Producto no encontrado.");
            }
        });
    }

    async updateProduct(id, updatedProduct) {
        return new Promise(async (resolve, reject) => {
            const index = this.products.findIndex(product => product.id === id);

            if (index !== -1) {
                // Mantenemos el ID del producto, no lo actualizamos
                updatedProduct.id = this.products[index].id;
                this.products[index] = updatedProduct;
                await fs.writeFile(this.path, JSON.stringify(this.products, null, 2), 'utf-8')
                resolve(`Producto con ID ${id} actualizado con éxito.`);
            } else {
                reject("Producto no encontrado. No se pudo actualizar.");
            }
        });
    }

    async deleteProduct(id) {
        return new Promise(async (resolve, reject) => {
            const index = this.products.findIndex(product => product.id === id);

            if (index !== -1) {
                this.products.splice(index, 1);
                await fs.writeFile(this.path, JSON.stringify(this.products, null, 2), 'utf-8')
                resolve(`Producto con ID ${id} eliminado con éxito.`);
            } else {
                reject("Producto no encontrado. No se pudo eliminar.");
            }
        });
    }
    
}

// Ejemplo de uso
const filePath = 'productos.json';
const productManager = new ProductManager(filePath);

productManager.addProduct("Producto 1", "Descripción 1", 20.99, "imagen1.jpg", "ABC123", 50)
    .then(result => console.log(result))
    .catch(error => console.error(error));

productManager.addProduct("Producto 2", "Descripción 2", 15.49, "imagen2.jpg", "XYZ789", 30)
    .then(result => console.log(result))
    .catch(error => console.error(error));

productManager.getProducts()
    .then(products => console.log("Lista de productos:", products));

const productIdToDelete = 1;
productManager.deleteProduct(productIdToDelete)
    .then(result => console.log(result))
    .catch(error => console.error(error));
